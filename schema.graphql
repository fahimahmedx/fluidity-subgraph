type fUSDTApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTBlockedReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTBurnFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTEmergency @entity(immutable: true) {
  id: ID!
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTMaxUncheckedRewardLimitChanged @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTMintApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTMintFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTNewOperator @entity(immutable: true) {
  id: ID!
  old: Bytes! # address
  new_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTOperatorChanged @entity(immutable: true) {
  id: ID!
  oldOperator: Bytes! # address
  newOperator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTRewardQuarantineThresholdUpdated @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTTransfer @entity(immutable: true) {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDTUnblockReward @entity(immutable: true) {
  id: ID!
  originalRewardTx: Bytes! # bytes32
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCBlockedReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCBurnFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCEmergency @entity(immutable: true) {
  id: ID!
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCMaxUncheckedRewardLimitChanged @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCMintApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCMintFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCNewOperator @entity(immutable: true) {
  id: ID!
  old: Bytes! # address
  new_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCOperatorChanged @entity(immutable: true) {
  id: ID!
  oldOperator: Bytes! # address
  newOperator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCRewardQuarantineThresholdUpdated @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCTransfer @entity(immutable: true) {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fUSDCUnblockReward @entity(immutable: true) {
  id: ID!
  originalRewardTx: Bytes! # bytes32
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type fDAIApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIBlockedReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIBurnFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIEmergency @entity(immutable: true) {
  id: ID!
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIMaxUncheckedRewardLimitChanged @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIMintApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIMintFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAINewOperator @entity(immutable: true) {
  id: ID!
  old: Bytes! # address
  new_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIOperatorChanged @entity(immutable: true) {
  id: ID!
  oldOperator: Bytes! # address
  newOperator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIRewardQuarantineThresholdUpdated @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAITransfer @entity(immutable: true) {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fDAIUnblockReward @entity(immutable: true) {
  id: ID!
  originalRewardTx: Bytes! # bytes32
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type fTUSDApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDBlockedReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDBurnFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDEmergency @entity(immutable: true) {
  id: ID!
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDMaxUncheckedRewardLimitChanged @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDMintApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDMintFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDNewOperator @entity(immutable: true) {
  id: ID!
  old: Bytes! # address
  new_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDOperatorChanged @entity(immutable: true) {
  id: ID!
  oldOperator: Bytes! # address
  newOperator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDRewardQuarantineThresholdUpdated @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDTransfer @entity(immutable: true) {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fTUSDUnblockReward @entity(immutable: true) {
  id: ID!
  originalRewardTx: Bytes! # bytes32
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type fFRAXApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXBlockedReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXBurnFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXEmergency @entity(immutable: true) {
  id: ID!
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXMaxUncheckedRewardLimitChanged @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXMintApproval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXMintFluid @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXNewOperator @entity(immutable: true) {
  id: ID!
  old: Bytes! # address
  new_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXOperatorChanged @entity(immutable: true) {
  id: ID!
  oldOperator: Bytes! # address
  newOperator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXReward @entity(immutable: true) {
  id: ID!
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXRewardQuarantineThresholdUpdated @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXTransfer @entity(immutable: true) {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type fFRAXUnblockReward @entity(immutable: true) {
  id: ID!
  originalRewardTx: Bytes! # bytes32
  winner: Bytes! # address
  amount: BigInt! # uint256
  startBlock: BigInt! # uint256
  endBlock: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
